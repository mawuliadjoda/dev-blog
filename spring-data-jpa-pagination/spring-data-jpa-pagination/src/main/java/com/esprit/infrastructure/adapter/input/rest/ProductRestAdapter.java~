package com.esprit.infrastructure.adapter.input.rest;

import com.esprit.application.ports.input.GetAllProductUseCase;
import com.esprit.domain.search.ProductDynamicSearchCriteria;
import com.esprit.domain.search.ProductSearchCriteria;
import com.esprit.infrastructure.adapter.input.rest.data.request.ProductCreateRequest;
import com.esprit.infrastructure.adapter.input.rest.data.response.ProductCreateResponse;
import com.esprit.infrastructure.adapter.input.rest.data.response.ProductQueryResponse;
import com.esprit.infrastructure.adapter.input.rest.mapper.ProductRestMapper;
import com.esprit.application.ports.input.CreateProductUseCase;
import com.esprit.application.ports.input.GetProductUseCase;
import com.esprit.domain.model.Product;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/v1")
@RequiredArgsConstructor
public class ProductRestAdapter {

    private final CreateProductUseCase createProductUseCase;
    private final GetProductUseCase getProductUseCase;
    private final ProductRestMapper productRestMapper;
    private final GetAllProductUseCase getAllProductUseCase;

    @PostMapping(value = "/products")
    public ResponseEntity<ProductCreateResponse> createProduct(@RequestBody @Valid ProductCreateRequest productCreateRequest) {
        // Rest to domain
        Product product = productRestMapper.toProduct(productCreateRequest);

        product = createProductUseCase.createProduct(product);

        // Domain to response
        return new ResponseEntity<>(productRestMapper.toProductCreateResponse(product), HttpStatus.CREATED);
    }

    @GetMapping(value = "/products/{id}")
    public ResponseEntity<ProductQueryResponse> getProduct(@PathVariable Long id) {
        Product product = getProductUseCase.getProductById(id);
        return new ResponseEntity<>(productRestMapper.toProductQueryResponse(product), HttpStatus.OK);
    }

    /**
     * http://localhost:8080/api/v1/search?name=Pytho&price=999.98&priceOperation=gt
     *
     * @param name
     * @param description
     * @param price
     * @param priceOperation
     * @return
     */
    @GetMapping(value = "/search")
    public ResponseEntity<List<ProductQueryResponse>> getAllProduct(
            @RequestParam(value = "name", required = false) String name,
            @RequestParam(value = "description", required = false) String description,
            @RequestParam(value = "price", required = false) Double price,
            @RequestParam(value = "priceOperation", required = false) String priceOperation
    ) {

        // Specification<ProductEntity> spec = Specification.where(ProductSpecifications.nameContains(name))
        //         .and(ProductSpecifications.descriptionContains(description));

        ProductSearchCriteria criteria = ProductSearchCriteria.builder()
                .name(name)
                .description(description)
                .price(price)
                .priceOperation(priceOperation)
                .build();

        List<Product> products = getAllProductUseCase.findAll(criteria);
        return new ResponseEntity<>(productRestMapper.toProductQueryResponses(products), HttpStatus.OK);
    }


    @Operation(
            summary = "Recherche des produits avec filtres dynamiques",
            description = "Permet de filtrer les produits par plusieurs critères en passant une Map de paramètres."
    )
    @GetMapping(value = "/dynamic-search")
    public ResponseEntity<List<ProductQueryResponse>> searchProduct(
            @Parameter(
                    description = "Map de paramètres contenant les critères de recherche",
                    example = """
                            {
                                "description": ["Electronics", "Books"],
                                "names": ["iPhone", "MacBook"],
                                "brands": ["Apple"],
                                "minPrice": ["500"],
                                "maxPrice": ["2000"]
                            }
                            """
            )
            @RequestParam MultiValueMap<String, String> params
    ) {

        List<String> descriptions = params.get("descriptions");

         List<String> names = params.get("names");


        ProductDynamicSearchCriteria productDynamicSearchCriteria = ProductDynamicSearchCriteria.builder()
                .names(names)
                .descriptions(descriptions)
                .build();

        List<Product> products = getAllProductUseCase.findAll(productDynamicSearchCriteria);
        return new ResponseEntity<>(productRestMapper.toProductQueryResponses(products), HttpStatus.OK);
    }

}
