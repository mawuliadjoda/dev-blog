
server:
  servlet:
    context-path: '/springboothelm'
  #port: 8181


spring:
  application:
    name: '@project.artifactId@'

  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true

    properties:
      hibernate:
        #generate_statistics: true
        #format_sql: true
        #use_sql_comments: true


  datasource:
    url: jdbc:postgresql://localhost:5432/test_db
    username: root
    password: root123


  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI}
          jwk-set-uri: ${KEYCLOAK_JWK_SET_URI}

        #jwt:
        #  # configuration needed for validating JWT token against our Keycloak server
        #  issuer-uri: http://my-keycloak.default.svc.cluster.local:80/realms/adjoda-dev-realm
        #  # Since JWT is signed and we need to verify its signature, we set the jwk-set-uri property to a Keycloak endpoint with
        #  # the required data for JWT signature verification.
        #  jwk-set-uri: http://my-keycloak.default.svc.cluster.local:80/realms/adjoda-dev-realm/protocol/openid-connect/certs





logging:
  level:
    root: INFO
    org.springframework.security: DEBUG
    org.springframework.boot.actuate.endpoint.web.servlet: DEBUG
    org.springframework.web: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: always
  security:
    enabled: false  # <= option importante si tu veux bypass la sécurité sur /actuator
